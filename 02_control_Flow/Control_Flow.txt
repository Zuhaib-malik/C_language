
The choice between using a ternary operator, if-else statements, or switch-case statements depends on the specific scenario and the complexity of the conditional logic.

Ternary Operator (?:)
    When to use: The ternary operator is ideal for short, simple conditional assignments or expressions where a single value needs to be determined based on a condition. It provides a concise way to express if-else logic on a single line.

    Use Cases:
        Assigning a value based on a condition: int max = (a > b) ? a : b;
        Printing a simple message based on a condition: (age >= 18) ? printf("Adult") : printf("Minor");
        When the condition and the resulting expressions are short and clear.

    Example:

        int max = (a > b) ? a : b; // Assigns the larger of a and b to max


    Avoid When:
        The conditions or actions are complex and involve multiple statements.
        Readability is prioritized over brevity, as complex ternary operations can become difficult to understand.
        Side effects are involved in the expressions, as it can lead to less predictable behavior.

if-else Statements
    When to use: if-else statements are suitable for complex conditions, multiple operations, or when readability and maintainability are priorities. They are more flexible than the ternary operator, allowing for multiple statements within each branch and handling a wider range of conditional expressions (including boolean values and complex logical combinations).
    Example: 

        if (score >= 90) {
            printf("Grade A\n");
        } else if (score >= 80) {
            printf("Grade B\n");
        } else {
            printf("Grade C\n");
        }

    Avoid When:
        we should generally avoid excessive or deeply nested if-else statements in the following situations:

            When a switch statement is more appropriate:
                For multiple conditions based on the value of a single variable, a switch statement often offers better readability and potentially better performance compared to a long chain of if-else if-else.

            For early exits or guard clauses:
                If a condition signifies an invalid input or an error state, use an if statement to handle the error and return or exit the function early. This avoids nesting and keeps the main logic cleaner.

            When using polymorphism or function pointers is possible:
                If you have different behaviors based on an object's type or a specific condition, consider using function pointers or object-oriented principles (if applicable in C, like structs with function pointers) to dispatch to the correct function instead of a large if-else structure.

            To reduce code duplication:
                If multiple if-else branches contain very similar code, consider refactoring to extract the common  logic into a separate function or using data structures (like arrays or maps) to store and retrieve data based on conditions.

            When deeply nested if-else blocks hinder readability:
                Too many nested if-else statements make code difficult to understand and maintain. Look for opportunities to simplify the logic, break it into smaller functions, or use alternative control flow mechanisms.

                

switch-case Statements
    When to use: switch-case statements are best used when comparing a single variable against multiple constant integer values. They offer a cleaner and more efficient way to handle multiple distinct cases compared to a long chain of if-else if statements.

    Use Cases:
        Comparing an integer or character expression against a set of discrete, constant values (e.g., menu selections, status codes).
        Improving readability when dealing with many else if conditions based on the same variable.
        Potentially offering performance advantages in some cases, as compilers can optimize switch statements more efficiently than chained if-else if constructs.

    Example:    
    
    char grade = 'B';
    switch (grade) {
        case 'A':
            printf("Excellent!\n");
            break;
        case 'B':
            printf("Very good!\n");
            break;
        case 'C':
            printf("Good.\n");
            break;
        default:
            printf("Needs improvement.\n");
            break;
    }

    Avoid When:
        The conditions involve complex logical expressions (e.g., ranges, multiple variables).
        The cases are not constant values (e.g., variables, expressions that change at runtime).
        Nesting switch statements excessively, as it can lead to complex and less readable code.
        Comparing string values directly, as switch in C only works with integral types and characters.