File Handling in C: A Complete Guide

What is File Handling?
File handling refers to **reading from** and **writing to** files on a storage device. It allows programs to:
- Store data permanently (beyond program execution)
- Process large datasets
- Share data between programs
- Save configuration/state information

When to Use File Handling
✅ Appropriate Use Cases:
1. Data Persistence
   - Saving user preferences/settings
   - Storing application state between runs
   - Example: Game save files

2. Data Processing  
   - Reading large datasets (CSV, logs)
   - Processing files line-by-line (without loading entire file into memory)
   - Example: Analyzing server logs

3. Configuration Files  
   - INI files, JSON configs
   - Example: `config.json` for application settings

4. Inter-Process Communication  
   - Sharing data between programs via files
   - Example: One program generates reports, another emails them

5. Binary Data Storage  
   - Saving images, audio, compiled data
   - Example: Image processing applications

When NOT to Use File Handling
❌ Poor Use Cases:
1. Frequent Small Writes**  
   - Writing to disk repeatedly (e.g., in a loop) is **slow**  
   - Better: Buffer data in memory, write once

2. Real-Time Systems  
   - Disk I/O is unpredictable (latency varies)  
   - Better: Use memory-mapped files or RAM disks

3. Highly Concurrent Access  
   - Multiple programs writing to the same file causes **race conditions**  
   - Better: Use databases (SQLite, PostgreSQL) or file locking

4. **Temporary Data  
   - Files that are only needed during program execution  
   - Better: Use **memory** (variables, arrays)  

5. Sensitive Data Storage  
   - Plaintext files are **insecure**  
   - Better: Use encrypted storage or secure databases

---

File Handling Operations in C
1. Opening a File
```c
FILE *file = fopen("data.txt", "r");  // Open for reading
```
**Common Modes**:
- `"r"` → Read (file must exist)
- `"w"` → Write (creates/overwrites)
- `"a"` → Append (adds to end)
- `"rb"`, `"wb"` → Binary modes

2. Reading from a File
```c
// Read line-by-line
char buffer[100];
while (fgets(buffer, sizeof(buffer), file)) {
    printf("%s", buffer);
}

// Read single character
int ch = fgetc(file);
```

3. Writing to a File
```c
fprintf(file, "Name: %s, Age: %d\n", name, age);  // Formatted write
fputs("Hello, World!\n", file);  // Write a string
fputc('A', file);  // Write a single character
```

4. Binary File Operations
```c
// Writing a struct
struct Student { int id; char name[20]; };
struct Student s = {1, "Alice"};

fwrite(&s, sizeof(struct Student), 1, file);

// Reading back
struct Student read_student;
fread(&read_student, sizeof(struct Student), 1, file);
```

5. Closing a File
```c
fclose(file);  // Always close files to avoid leaks!
```

---

Best Practices
✔ Always check if `fopen()` succeeded  
✔ Close files with `fclose()`** (prevents corruption)  
✔ Use binary mode (`"rb"`, `"wb"`) for non-text data  
✔ Prefer `fgets()` over `fscanf()` for line reading (safer)  
✔ Avoid storing sensitive data in plaintext files  

Alternatives to File Handling
- **Databases** (SQLite, MySQL) → Better for structured data  
- **Memory-mapped files** → Faster for large files  
- **Temporary files (`tmpfile()`)** → Auto-deleted after program ends  

---

Final Verdict
Use File Handling When:
- You need **persistent storage**  
- Working with **large datasets**  
- Storing **configuration** or **logs**  

Avoid File Handling When:
- You need **high-speed access** (use RAM)  
- Multiple programs access the **same file** (use a DB)  
- Data is **temporary** (use variables)  

